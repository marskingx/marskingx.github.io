#!/usr/bin/env node

/**
 * AI Ë®òÊÜ∂Ê™îÊ°àÂêåÊ≠•Â∑•ÂÖ∑
 * ÁÆ°ÁêÜ docs/aimemory/ ÁõÆÈåÑ‰∏ãÁöÑË®òÊÜ∂Ê™îÊ°àÂêåÊ≠•
 */

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

class AIMemorySync {
    constructor() {
        this.projectRoot = process.cwd();
        this.memoryDir = path.join(this.projectRoot, 'docs/aimemory');
        this.worktrees = [
            { name: 'Claude', path: this.projectRoot, branch: 'main' },
            { name: 'Codex', path: 'D:/marskingx-worktrees/codex-dev', branch: 'codex-dev' },
            { name: 'Gemini', path: 'D:/marskingx-worktrees/gemini-dev', branch: 'gemini-dev' }
        ];
    }

    async run(action = 'status') {
        console.log('üß† AI Ë®òÊÜ∂Ê™îÊ°àÂêåÊ≠•Â∑•ÂÖ∑\n');
        console.log('======================================\n');

        switch (action) {
            case 'status':
                await this.checkMemoryStatus();
                break;
            case 'sync':
                await this.syncMemoryFiles();
                break;
            case 'clean':
                await this.cleanOldFiles();
                break;
            case 'structure':
                await this.showMemoryStructure();
                break;
            default:
                this.showUsage();
        }
    }

    async checkMemoryStatus() {
        console.log('üìä AI Ë®òÊÜ∂Ê™îÊ°àÁãÄÊÖãÊ™¢Êü•\n');

        // Ê™¢Êü•‰∏ªË®òÊÜ∂ÁõÆÈåÑÁµêÊßã
        const memoryStructure = this.analyzeMemoryStructure();
        this.displayMemoryStructure(memoryStructure);

        // Ê™¢Êü•ÂêÑ worktree ÁöÑË®òÊÜ∂Ê™îÊ°àÂêåÊ≠•ÁãÄÊÖã
        for (const worktree of this.worktrees) {
            await this.checkWorktreeMemory(worktree);
        }

        this.showSyncSuggestions();
    }

    analyzeMemoryStructure() {
        const structure = {
            shared: [],
            claude: [],
            gemini: [],
            codex: [],
            orphaned: []
        };

        const memoryDirs = ['shared', 'claude', 'gemini', 'codex'];
        
        for (const dir of memoryDirs) {
            const dirPath = path.join(this.memoryDir, dir);
            if (fs.existsSync(dirPath)) {
                const files = fs.readdirSync(dirPath)
                    .filter(file => file.endsWith('.md') || file.endsWith('.txt'));
                structure[dir] = files.map(file => ({
                    name: file,
                    size: this.getFileSize(path.join(dirPath, file)),
                    modified: this.getLastModified(path.join(dirPath, file))
                }));
            }
        }

        // Ê™¢Êü•Ê†πÁõÆÈåÑÊòØÂê¶ÈÇÑÊúâÈÅ∫ÁïôÁöÑ AI Ê™îÊ°à
        const rootFiles = fs.readdirSync(this.projectRoot)
            .filter(file => this.isAIMemoryFile(file));
        
        structure.orphaned = rootFiles.map(file => ({
            name: file,
            location: 'root',
            suggestion: this.suggestLocation(file)
        }));

        return structure;
    }

    displayMemoryStructure(structure) {
        console.log('üìÅ Ë®òÊÜ∂Ê™îÊ°àÁµêÊßã:\n');

        const categories = ['shared', 'claude', 'gemini', 'codex'];
        
        for (const category of categories) {
            const files = structure[category];
            const icon = this.getCategoryIcon(category);
            
            console.log(`${icon} ${category.toUpperCase()}:`);
            
            if (files.length === 0) {
                console.log('   (Á©∫ÁõÆÈåÑ)');
            } else {
                files.forEach(file => {
                    console.log(`   üìÑ ${file.name} (${file.size}, ${file.modified})`);
                });
            }
            console.log();
        }

        // È°ØÁ§∫ÈÅ∫ÁïôÊ™îÊ°à
        if (structure.orphaned.length > 0) {
            console.log('‚ö†Ô∏è  Ê†πÁõÆÈåÑÈÅ∫ÁïôÁöÑ AI Ê™îÊ°à:');
            structure.orphaned.forEach(file => {
                console.log(`   üìÑ ${file.name} ‚Üí Âª∫Ë≠∞ÁßªÂãïÂà∞: ${file.suggestion}`);
            });
            console.log();
        }
    }

    async checkWorktreeMemory(worktree) {
        console.log(`üå≥ ${worktree.name} Worktree (${worktree.branch}):`);

        try {
            const memoryPath = path.join(worktree.path, 'docs/aimemory');
            
            if (!fs.existsSync(memoryPath)) {
                console.log('   ‚ùå Ë®òÊÜ∂ÁõÆÈåÑ‰∏çÂ≠òÂú®');
                return;
            }

            const sharedPath = path.join(memoryPath, 'shared');
            if (fs.existsSync(sharedPath)) {
                const sharedFiles = fs.readdirSync(sharedPath).length;
                console.log(`   üìã ÂÖ±Áî®Ë®òÊÜ∂: ${sharedFiles} ÂÄãÊ™îÊ°à`);
            }

            const personalPath = path.join(memoryPath, worktree.name.toLowerCase());
            if (fs.existsSync(personalPath)) {
                const personalFiles = fs.readdirSync(personalPath).length;
                console.log(`   üë§ ÂÄã‰∫∫Ë®òÊÜ∂: ${personalFiles} ÂÄãÊ™îÊ°à`);
            }

            // Ê™¢Êü•ÂêåÊ≠•ÁãÄÊÖã
            const lastSync = this.getLastSyncTime(worktree.path);
            console.log(`   üîÑ ÊúÄÂæåÂêåÊ≠•: ${lastSync}`);

        } catch (error) {
            console.log(`   ‚ùå Ê™¢Êü•Â§±Êïó: ${error.message}`);
        }

        console.log();
    }

    async syncMemoryFiles() {
        console.log('üîÑ ÂêåÊ≠•Ë®òÊÜ∂Ê™îÊ°àÂà∞ÊâÄÊúâ worktree\n');

        const sharedDir = path.join(this.memoryDir, 'shared');
        
        if (!fs.existsSync(sharedDir)) {
            console.log('‚ùå ÂÖ±Áî®Ë®òÊÜ∂ÁõÆÈåÑ‰∏çÂ≠òÂú®');
            return;
        }

        for (const worktree of this.worktrees) {
            if (worktree.name === 'Claude') continue; // ‰∏ªÁõÆÈåÑË∑≥ÈÅé

            console.log(`üìã ÂêåÊ≠•Âà∞ ${worktree.name} worktree:`);

            try {
                const targetMemoryDir = path.join(worktree.path, 'docs/aimemory');
                
                // Âª∫Á´ãÁõÆÈåÑÁµêÊßã
                ['shared', 'claude', 'gemini', 'codex'].forEach(dir => {
                    const dirPath = path.join(targetMemoryDir, dir);
                    if (!fs.existsSync(dirPath)) {
                        fs.mkdirSync(dirPath, { recursive: true });
                    }
                });

                // ÂêåÊ≠•ÂÖ±Áî®Ê™îÊ°à
                const sharedFiles = fs.readdirSync(sharedDir);
                sharedFiles.forEach(file => {
                    const sourcePath = path.join(sharedDir, file);
                    const targetPath = path.join(targetMemoryDir, 'shared', file);
                    fs.copyFileSync(sourcePath, targetPath);
                });

                console.log(`   ‚úÖ ÂêåÊ≠•ÂÆåÊàê (${sharedFiles.length} ÂÄãÂÖ±Áî®Ê™îÊ°à)`);

            } catch (error) {
                console.log(`   ‚ùå ÂêåÊ≠•Â§±Êïó: ${error.message}`);
            }
        }

        console.log('\nüí° Ë®òÊÜ∂Ê™îÊ°àÂ∑≤ÂêåÊ≠•ÔºåË´ãÂêÑ AI Ê™¢Êü•Êú¨Âú∞Ë®òÊÜ∂ÁõÆÈåÑ');
    }

    async cleanOldFiles() {
        console.log('üßπ Ê∏ÖÁêÜÈÅ∫ÁïôÁöÑ AI Ë®òÊÜ∂Ê™îÊ°à\n');

        const rootAIFiles = fs.readdirSync(this.projectRoot)
            .filter(file => this.isAIMemoryFile(file));

        if (rootAIFiles.length === 0) {
            console.log('‚úÖ Ê†πÁõÆÈåÑÊ≤íÊúâÈÅ∫ÁïôÁöÑ AI Ê™îÊ°à');
            return;
        }

        console.log('üóëÔ∏è  ÁôºÁèæÈÅ∫ÁïôÊ™îÊ°à:');
        rootAIFiles.forEach(file => {
            console.log(`   üìÑ ${file}`);
        });

        console.log('\nüí° Âª∫Ë≠∞ÊâãÂãïÊ™¢Êü•ÂæåÁßªÂãïÂà∞ÈÅ©Áï∂ÁöÑ docs/aimemory/ Â≠êÁõÆÈåÑ');
    }

    async showMemoryStructure() {
        console.log('üèóÔ∏è  AI Ë®òÊÜ∂Á≥ªÁµ±Êû∂Êßã\n');

        console.log('üìÅ ÁõÆÈåÑÁµêÊßã:');
        console.log('docs/aimemory/');
        console.log('‚îú‚îÄ‚îÄ shared/           # ‰∏â AI ÂÖ±Áî®Ë®òÊÜ∂');
        console.log('‚îú‚îÄ‚îÄ claude/           # Claude (ÂÖãÂãûÂæ∑) Â∞àÁî®');
        console.log('‚îú‚îÄ‚îÄ gemini/           # Gemini Â∞àÁî®');
        console.log('‚îú‚îÄ‚îÄ codex/            # Codex Â∞àÁî®');
        console.log('‚îî‚îÄ‚îÄ README.md         # Ë™™ÊòéÊñá‰ª∂');
        console.log();

        console.log('üéØ Ë®≠Ë®àÂéüÂâá:');
        console.log('‚Ä¢ ÂÖ±Áî®Ë®òÊÜ∂ - ÈÅøÂÖçÈáçË§áÁ∂≠Ë≠∑');
        console.log('‚Ä¢ Â∞àÊ•≠ÂàÜÂ∑• - ÁôºÊèÆÂêÑËá™ÂÑ™Âã¢');
        console.log('‚Ä¢ Êú¨Âú∞ÁÆ°ÁêÜ - ‰∏çÊé®ÈÄÅÂà∞ GitHub');
        console.log('‚Ä¢ ÂàÜÈ°ûÊ∏ÖÊô∞ - ‰æøÊñºÁ∂≠Ë≠∑ÁÆ°ÁêÜ');
        console.log();
    }

    // ËºîÂä©ÊñπÊ≥ï
    isAIMemoryFile(filename) {
        const patterns = [
            /^AI_.*\.md$/,
            /^CLAUDE.*\.md$/,
            /^GEMINI.*\.md$/,
            /^CODEX.*\.md$/,
            /.*ONBOARDING.*\.md$/,
            /.*HANDOVER.*\.md$/,
            /.*REVIEW.*\.md$/,
            /.*COLLABORATION.*\.md$/,
            /^GSC_.*\.(md|txt)$/
        ];

        return patterns.some(pattern => pattern.test(filename));
    }

    suggestLocation(filename) {
        if (filename.includes('SHARED') || filename.includes('COLLABORATION')) {
            return 'docs/aimemory/shared/';
        } else if (filename.includes('CLAUDE')) {
            return 'docs/aimemory/claude/';
        } else if (filename.includes('GEMINI')) {
            return 'docs/aimemory/gemini/';
        } else if (filename.includes('CODEX')) {
            return 'docs/aimemory/codex/';
        }
        return 'docs/aimemory/shared/';
    }

    getCategoryIcon(category) {
        const icons = {
            shared: 'ü§ù',
            claude: 'üß†',
            gemini: '‚ú®',
            codex: '‚öôÔ∏è'
        };
        return icons[category] || 'üìÅ';
    }

    getFileSize(filePath) {
        try {
            const stats = fs.statSync(filePath);
            const bytes = stats.size;
            if (bytes < 1024) return `${bytes}B`;
            if (bytes < 1024 * 1024) return `${Math.round(bytes / 1024)}KB`;
            return `${Math.round(bytes / (1024 * 1024))}MB`;
        } catch {
            return 'N/A';
        }
    }

    getLastModified(filePath) {
        try {
            const stats = fs.statSync(filePath);
            return stats.mtime.toLocaleDateString('zh-TW');
        } catch {
            return 'N/A';
        }
    }

    getLastSyncTime(worktreePath) {
        try {
            const syncFile = path.join(worktreePath, 'docs/aimemory/.last-sync');
            if (fs.existsSync(syncFile)) {
                return fs.readFileSync(syncFile, 'utf8').trim();
            }
        } catch {
            return 'ÂæûÊú™ÂêåÊ≠•';
        }
        return 'ÂæûÊú™ÂêåÊ≠•';
    }

    showSyncSuggestions() {
        console.log('üí° Âª∫Ë≠∞Âãï‰Ωú:\n');
        console.log('‚Ä¢ ÂêåÊ≠•Ë®òÊÜ∂Ê™îÊ°à: npm run memory:sync');
        console.log('‚Ä¢ Ê∏ÖÁêÜÈÅ∫ÁïôÊ™îÊ°à: npm run memory:clean');  
        console.log('‚Ä¢ Êü•ÁúãÁ≥ªÁµ±Êû∂Êßã: npm run memory:structure');
        console.log('‚Ä¢ Ê™¢Êü•ÂêåÊ≠•ÁãÄÊÖã: npm run memory:status');
        console.log();
    }

    showUsage() {
        console.log('‰ΩøÁî®ÊñπÂºè:\n');
        console.log('npm run memory:status     - Ê™¢Êü•Ë®òÊÜ∂Ê™îÊ°àÁãÄÊÖã');
        console.log('npm run memory:sync       - ÂêåÊ≠•ÂÖ±Áî®Ë®òÊÜ∂Âà∞ÊâÄÊúâ worktree');
        console.log('npm run memory:clean      - Ê∏ÖÁêÜÈÅ∫ÁïôÊ™îÊ°à');
        console.log('npm run memory:structure  - È°ØÁ§∫Á≥ªÁµ±Êû∂Êßã');
        console.log();
    }
}

// Âü∑Ë°å
if (require.main === module) {
    const action = process.argv[2] || 'status';
    const sync = new AIMemorySync();
    sync.run(action).catch(console.error);
}

module.exports = AIMemorySync;